require 'test/unit'
require_relative 'aes_128'

class TestAES128 < Test::Unit::TestCase
  def test_aes_128
    aes_128 = AES_128.new(
      (0x00..0xFF).step(0x11).map(&:chr).join,
      (0x00..0x0F).map(&:chr).join
    )

    assert_equal(Matrix.columns((0x00..0xF0).step(0x10).each_slice(4).to_a), aes_128.add_round_key)
    assert_equal(
      Matrix[
        [0x63, 0x09, 0xCD, 0xBA],
        [0xCA, 0x53, 0x60, 0x70],
        [0xB7, 0xD0, 0xE0, 0xE1],
        [0x04, 0x51, 0xE7, 0x8C]
      ],
      aes_128.byte_sub
    )
    assert_equal(
      Matrix[
        [0x63, 0x09, 0xCD, 0xBA],
        [0x53, 0x60, 0x70, 0xCA],
        [0xE0, 0xE1, 0xB7, 0xD0],
        [0x8C, 0x04, 0x51, 0xE7]
      ],
      aes_128.shift_row
    )
    assert_equal(
      Matrix[
        [0x5F, 0x57, 0xF7, 0x1D],
        [0x72, 0xF5, 0xBE, 0xB9],
        [0x64, 0xBC, 0x3B, 0xF9],
        [0x15, 0x92, 0x29, 0x1A]
      ],
      aes_128.mix_column
    )
    assert_equal(
      Matrix[
        [0xD6, 0xD2, 0xDA, 0xD6],
        [0xAA, 0xAF, 0xA6, 0xAB],
        [0x74, 0x72, 0x78, 0x76],
        [0xFD, 0xFA, 0xF1, 0xFE]
      ],
      Matrix.columns(aes_128.instance_variable_get(:@k).expansion(32).drop(16).each_slice(4).to_a)
    )
  end
end
